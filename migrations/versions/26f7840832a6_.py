"""Associate impact pt_object

Revision ID: 26f7840832a6
Revises: 395d2d1824a9
Create Date: 2014-08-04 10:21:19.334206

"""

# revision identifiers, used by Alembic.
revision = '26f7840832a6'
down_revision = '395d2d1824a9'

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import uuid
from datetime import datetime

def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.create_table('associate_impact_pt_object',
    sa.Column('impact_id', postgresql.UUID(), nullable=True),
    sa.Column('pt_object_id', postgresql.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['impact_id'], ['impact.id'], ),
    sa.ForeignKeyConstraint(['pt_object_id'], ['pt_object.id'], ),
    sa.PrimaryKeyConstraint('impact_id', 'pt_object_id', name='impact_pt_object_pk')
    )
    connection = op.get_bind()
    result = connection.execute('select uri, impact_id , id from pt_object order by uri')
    Old_Uri = None
    Old_pt_object_id = None
    for row in result:
        if row['uri'] != Old_Uri:
            Old_pt_object_id = row['id']
            Old_Uri = row['uri']
        op.execute("INSERT INTO associate_impact_pt_object (impact_id, pt_object_id) VALUES ('{}', '{}')".format(row['impact_id'], Old_pt_object_id))

    op.drop_index('ix_pt_object_impact_id', 'pt_object')
    op.drop_column(u'pt_object', 'impact_id')
    op.execute('DELETE FROM pt_object where id not in (select pt_object_id from associate_impact_pt_object)')
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.add_column(u'pt_object', sa.Column('impact_id', postgresql.UUID(), nullable=True))
    op.create_index('ix_pt_object_impact_id', 'pt_object', ['impact_id'], unique=False)
    connection = op.get_bind()
    result = connection.execute('SELECT pto.pt_object_id, pto.impact_id, pt.uri, pt.type FROM associate_impact_pt_object as pto, pt_object as pt where pto.pt_object_id=pt.id ORDER BY  pto.pt_object_id')
    dicionnary = {}
    for row in result:
        if row['pt_object_id'] in dicionnary:
            pt_object_id = str(uuid.uuid1())
            dicionnary[pt_object_id] = {"query": "INSERT INTO pt_object (created_at, id, uri, impact_id, type) VALUES ('{}', '{}', '{}', '{}', '{}')".
                                        format(datetime.utcnow(), pt_object_id, row['uri'], row['impact_id'],  row['type'])}
        else:
            dicionnary[row['pt_object_id']] = {"query": "UPDATE pt_object SET impact_id = '{}' WHERE id = '{}'".
                                                        format(row['impact_id'], row['pt_object_id'])}
    for row in dicionnary:
        op.execute(dicionnary[row]["query"])
    op.drop_table('associate_impact_pt_object')
    op.alter_column("pt_object", "impact_id", nullable=False)
    ### end Alembic commands ###
